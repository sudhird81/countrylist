{"version":3,"sources":["components/header.js","App.js","serviceWorker.js","index.js"],"names":["Header","color","dark","expand","className","id","navbar","left","Home","useState","countries","setCountries","countriesPerPage","setCountriesPerPage","activePage","setActivePage","totalCount","setTotalCount","searchKeyword","setSearchKeyword","useEffect","axios","get","headers","Authorization","then","response","i","state","data","name","length","total","catch","error","console","log","renderCountries","map","value","index","key","Fragment","md","lg","sm","type","onChange","event","target","placeholder","aria-label","parseInt","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","itemClass","linkClass","number","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8PAkBeA,MAhBf,WACE,OACE,kBAAC,IAAD,CAAWC,MAAM,SAASC,MAAI,EAACC,OAAO,MAClC,kBAAC,IAAD,KACE,4BAAQC,UAAU,cAAlB,0BAEF,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAaC,GAAG,kBAAkBC,QAAM,GACtC,kBAAC,IAAD,CAAcC,MAAI,GAChB,kBAAC,IAAD,U,kCCqGGC,MA3Gf,WAAiB,IAAD,EACoBC,mBAAS,IAD7B,mBACPC,EADO,KACIC,EADJ,OAEkCF,mBAAS,IAF3C,mBAEPG,EAFO,KAEWC,EAFX,OAGsBJ,mBAAS,GAH/B,mBAGPK,EAHO,KAGKC,EAHL,OAIsBN,mBAAS,GAJ/B,mBAIPO,EAJO,KAIKC,EAJL,OAK4BR,mBAAS,IALrC,mBAKPS,EALO,KAKQC,EALR,KAOdC,qBAAU,WACRC,IACGC,IADH,yDAEsDR,EAFtD,kBAE0EF,EAF1E,oBAEsGM,GAClG,CACEK,QAAS,CACPC,cAAe,gCAIpBC,MAAK,SAAAC,GACJf,EAAa,IACb,IAFgB,eAEPgB,GACPhB,GAAa,SAAAiB,GAAK,4BAAQA,GAAR,CAAeF,EAASG,KAAKA,KAAKA,KAAKF,GAAGG,WADrDH,EAAI,EAAGA,EAAID,EAASG,KAAKA,KAAKA,KAAKE,OAAQJ,IAAM,EAAjDA,GAGTV,EAAcS,EAASG,KAAKG,UAE7BC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAEf,CAACtB,EAAkBE,EAAYI,IAElC,IAAMmB,EAAkB3B,EAAU4B,KAAI,SAACC,EAAOC,GAC5C,OACE,wBAAIC,IAAKD,GACP,gCAAMD,OAsBZ,OACE,kBAAC,IAAMG,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAQtC,UAAU,aAChB,kBAAC,IAAD,CAAQuC,GAAG,IAAIC,GAAG,IAAIC,GAAG,MACvB,yBAAKzC,UAAU,gBACb,2BACEA,UAAU,eACV0C,KAAK,OACLP,MAAOrB,EACP6B,SA3Be,SAAAC,GACzB7B,EAAiB6B,EAAMC,OAAOV,OACH,KAAvBS,EAAMC,OAAOV,OACfpB,EAAiB,IAEnBJ,EAAc,IAuBJmC,YAAY,SACZC,aAAW,SACXrB,KAAK,SACLzB,GAAG,YAGP,wBAAID,UAAU,QAAQiC,IAGxB,kBAAC,IAAD,CAAQM,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAAKzC,UAAU,aACtC,yBAAKA,UAAU,mBACb,4BACEA,UAAU,eACVmC,MAAO3B,EACPmC,SAjCe,SAAAC,GACzBnC,EAAoBuC,SAASJ,EAAMC,OAAOV,SAiChCT,KAAK,QACLzB,GAAG,SAEH,4BAAQkC,MAAM,KAAd,KACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,UAKR,kBAAC,IAAD,CAAQnC,UAAU,aAChB,yBAAKA,UAAU,QACb,kBAAC,IAAD,CACEU,WAAYA,EACZuC,kBAAmBzC,EACnB0C,gBAAiBtC,EACjBuC,mBAAoB,EACpBC,UAAU,YACVC,UAAU,YACVV,SAjDe,SAAAW,GACvB3C,EAAc2C,UC5CEC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdzC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMyC,c","file":"static/js/main.395815fe.chunk.js","sourcesContent":["import React from 'react';\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBNavbarToggler, MDBCollapse} from \"mdbreact\";\nfunction Header() {\n  return (\n    <MDBNavbar color=\"indigo\" dark expand=\"md\">\n        <MDBNavbarBrand>\n          <strong className=\"white-text\">Country Search & List</strong>\n        </MDBNavbarBrand>\n        <MDBNavbarToggler/>\n        <MDBCollapse id=\"navbarCollapse3\" navbar>\n          <MDBNavbarNav left>\n            <MDBNavItem>\n            </MDBNavItem>\n          </MDBNavbarNav>\n        </MDBCollapse>\n    </MDBNavbar>\n  );\n}\nexport default Header;","import React, { useState, useEffect } from \"react\";\nimport { MDBRow, MDBCol } from \"mdbreact\";\nimport Header from \"./components/header\";\nimport axios from \"axios\";\nimport Pagination from \"react-js-pagination\";\nfunction Home() {\n  const [countries, setCountries] = useState([]);\n  const [countriesPerPage, setCountriesPerPage] = useState(10);\n  const [activePage, setActivePage] = useState(1);\n  const [totalCount, setTotalCount] = useState(0);\n  const [searchKeyword, setSearchKeyword] = useState(\"\");\n  // Fetching the country list from the api\n  useEffect(() => {\n    axios\n      .get(\n        `http://3.87.165.124:88/rest-countries-v1/?page=${activePage}&limit=${countriesPerPage}&country=${searchKeyword}`,\n        {\n          headers: {\n            Authorization: \"dsds93432$#%^#$#Dfdfd$%@#@\"\n          }\n        }\n      )\n      .then(response => {\n        setCountries([]);\n        for (let i = 0; i < response.data.data.data.length; i++) {\n          setCountries(state => [...state, response.data.data.data[i].name]);\n        }\n        setTotalCount(response.data.total);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }, [countriesPerPage, activePage, searchKeyword]);\n\n  const renderCountries = countries.map((value, index) => {\n    return (\n      <ul key={index}>\n        <li> {value}</li>\n      </ul>\n    );\n  });\n\n  const handleSearchChange = event => {\n    setSearchKeyword(event.target.value);\n    if (event.target.value === \"\") {\n      setSearchKeyword(\"\");\n    }\n    setActivePage(1);\n  };\n\n  // Configuring the limit of the countries name\n  const onChangeLimitValue = event => {\n    setCountriesPerPage(parseInt(event.target.value));\n  };\n\n  const handlePageChange = number => {\n    setActivePage(number);\n  };\n\n  return (\n    <React.Fragment>\n      <Header />\n      <MDBRow className=\"ml-0 mr-0\">\n        <MDBCol md=\"6\" lg=\"6\" sm=\"12\">\n          <div className=\"md-form mt-0\">\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              value={searchKeyword}\n              onChange={handleSearchChange}\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n              name=\"search\"\n              id=\"search\"\n            />\n          </div>\n          <h5 className=\"mt-5\">{renderCountries}</h5>\n        </MDBCol>\n\n        <MDBCol md=\"6\" lg=\"6\" sm=\"12\" className=\"word-wrap\">\n          <div className=\"form-group mt-2\">\n            <select\n              className=\"form-control\"\n              value={countriesPerPage}\n              onChange={onChangeLimitValue}\n              name=\"limit\"\n              id=\"limit\"\n            >\n              <option value=\"5\">5</option>\n              <option value=\"10\">10</option>\n              <option value=\"20\">20</option>\n            </select>\n          </div>\n        </MDBCol>\n      </MDBRow>\n      <MDBRow className=\"mr-0 mt-5\">\n        <div className=\"ml-5\">\n          <Pagination\n            activePage={activePage}\n            itemsCountPerPage={countriesPerPage}\n            totalItemsCount={totalCount}\n            pageRangeDisplayed={5}\n            itemClass=\"page-item\"\n            linkClass=\"page-link\"\n            onChange={handlePageChange}\n          />\n        </div>\n      </MDBRow>\n    </React.Fragment>\n  );\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"./css/index.css\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}